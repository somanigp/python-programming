Procedural Programming - Working from top to bottom , going after task to task and gets confusing
OOPs - Each reusable module does it own thing and all comes together. We manage different things which do things of their own.

In OOPs :
    1. We try to modal real world objects.
    2. In order to modal - needs 2 things : what it has (Attributes - This is a variable associated with an object/
    Variable associated with the modal) and does (Methods - defined by functions )
    3. Multiple versions from the same blueprint we can generate - objects
So Type - Class (Blueprint) and  Objects ( Individual Objects generated from class)

Syntax
car = CarBluePrint() # First letter of each word capitalized ( Pascal Case ) - Activates construction of the object
from blue-print

JSON: JavaScript Object Notation


NOTE:
The __pycache__ folder is a directory automatically created by Python to store compiled bytecode files (.pyc) generated by the interpreter. This folder is used for performance optimization by caching compiled versions of Python modules or scripts.

When a Python script or module is executed, the Python interpreter compiles the source code into intermediate bytecode before executing it. This bytecode is platform-independent and allows Python to execute the code more efficiently on subsequent runs without having to recompile the source every time.

Class Inheritance:
classes can inherit from other classes, inherit attributes and methods - making simpler to modify classes and give it more
capabilities
In case of sub-category, we need the qualities ( methods and attributes ) of the parent class and add few finer details for the
child class. This is achieved through inheritance.
so the sub class has qualities of the parent and then some more

syntax :

class Fish(Animal):
    def __init__(self):
        super().__init__()  # initializing the parent class also here, this is in order to get hold of animal qualities
        # super refers to super class (Animal) - initialize everything super class can do in our fish class
